// JS array equivalentes aos métodos C# LINQ
// Pode ajudar bastante quem vem do C# para JS ou vice versa

// Aqui está um array simples de objetos "pessoa"
var people = [ 
	{ name: "John", age: 20 }, 
	{ name: "Mary", age: 35 }, 
	{ name: "Arthur", age: 78 }, 
	{ name: "Mike", age: 27 }, 
	{ name: "Judy", age: 42 }, 
	{ name: "Tim", age: 8 } 
];


// filter é equivalente ao "Where"
var youngsters = people.filter(function (item) {
	return item.age < 30;
});

console.log("People younger than 30");

console.log(youngsters);


// map é equivalente ao "Select"

var names = people.map(function (item) {
	return item.name;
});

console.log("Just the names of people");

console.log(names);


// every é quivalente ao "All"

var allUnder40 = people.every(function (item) {
	return  item.age < 40;
});

console.log("Are all people under 40?"); // false

console.log(allUnder40);


// some é equivalente ao "Any"

var anyUnder30 = people.some(function (item) {
	return  item.age < 30;
});

console.log("Are any people under 30?"); 

console.log(anyUnder30); // true


// reduce é "meio" equivalente a Agregar (e também pode ser usado para somar)

var aggregate = people.reduce(function (item1, item2) {
	return  { name: '', age: item1.age + item2.age };
});

console.log("Aggregate age"); 

console.log(aggregate.age); // { age: 210 }


// sort é "meio" como OrderBy (mas ele classifica a matriz no lugar)

var orderedByName = people.sort(function (a, b) {
	return  a.name > b.name ? 1 : -1;
})

console.log("Ordered by name"); 

console.log(orderedByName);


// e, claro, você pode encadear chamadas de função 
var namesOfPeopleOver30OrderedDesc = people.filter(function (person) {
	return person.age > 30;
}).
map(function (person) {
	return person.name;
}).
sort(function (a, b) {
	return a < b ? 1 : -1;
});

console.log("And now.. the names of all people over 30 ordered by name descending");

console.log(namesOfPeopleOver30OrderedDesc);
